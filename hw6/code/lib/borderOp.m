function sp = borderOp(kernel, fshape)
    s = (size(kernel, 1)-1)/2;
    m = fshape(1); n = fshape(2);

    N = s^2 * sum(fshape);
    I = zeros(N, 1);
    J = zeros(N, 1);
    K = zeros(N, 1);
    counter = 1;
    
    cache = { ...
        cumsum(kernel, 2), ...
        cumsum(fliplr(kernel), 2), ...
        cumsum(kernel, 1), ...
        cumsum(flipud(kernel), 1), ...
    };
    [I, J, K, counter] = edge(I, J, K, counter, cache{1}, s, fshape, ...
        s+1:m-s, 1:s, ...
        @(x, l) x+l, @(y, l) 1, ...
        @(x, l) s+1+l, @(y, l) s+1-y ...
    ); % left
    [I, J, K, counter] = edge(I, J, K, counter, cache{2}, s, fshape, ...
        s+1:m-s, n+1-(1:s), ...
        @(x, l) x+l, @(y, l) n, ...
        @(x, l) s+1+l, @(y, l) y-n+s ...
    ); % right
    [I, J, K, counter] = edge(I, J, K, counter, cache{3}, s, fshape, ...
        1:s, s+1:n-s, ...
        @(x, l) 1, @(y, l) y+l, ...
        @(x, l) s+1-x, @(y, l) s+1+l ...
    ); % top
    [I, J, K, counter] = edge(I, J, K, counter, cache{4}, s, fshape, ...
        m+1-(1:s), s+1:n-s, ...
        @(x, l) m, @(y, l) y+l, ...
        @(x, l) x-m+s, @(y, l) s+1+l ...
    ); % bottom
    
    %% Corners
    cache2 = { ...
        cumsum(cumsum(kernel), 2) - kernel, ...
        cumsum(cumsum(flipud(kernel)), 2) - flipud(kernel), ...
        cumsum(cumsum(fliplr(kernel)), 2) - fliplr(kernel), ...
        cumsum(cumsum(rot90(kernel, 2), 2)) - rot90(kernel, 2), ...
    };
    [I, J, K, counter] = corner_(I, J, K, counter, cache{1}, cache{3}, cache2{1}, s, fshape, ...
        1:s, 1:s, ...
        @(x, i) x+i, @(y, i) 1, ...
        @(x, j) 1, @(y, j) y+j ...
    ); % top-left
    [I, J, K, counter] = corner_(I, J, K, counter, flipud(cache{1}), cache{4}, cache2{2}, s, fshape, ...
        m+1-(1:s), 1:s, ...
        @(x, i) x-i, @(y, i) 1, ...
        @(x, j) m, @(y, j) y+j ...
    ); % bottom-left
    [I, J, K, counter] = corner_(I, J, K, counter, cache{2}, fliplr(cache{3}), cache2{3}, s, fshape, ...
        1:s, n+1-(1:s), ...
        @(x, i) x+i, @(y, i) n, ...
        @(x, j) 1, @(y, j) y-j ...
    ); % top-right
    [I, J, K, counter] = corner_(I, J, K, counter, flipud(cache{2}), fliplr(cache{4}), cache2{4}, s, fshape, ...
        m+1-(1:s), n+1-(1:s), ...
        @(x, i) x-i, @(y, i) n, ...
        @(x, j) m, @(y, j) y-j ...
    ); % bottom-right
    
    I = I(1:counter-1);
    J = J(1:counter-1);
    K = K(1:counter-1);
    
    sp = sparse(I, J, K, m*n, m*n);
end

function [I, J, K, counter] = edge(I, J, K, counter, cache, s, ...
    fshape, xRange, yRange, ix, iy, cx, cy)
    for x = xRange
        for y = yRange
            currIdx = sub2ind(fshape, x, y);
            for l = -s:s
                J(counter) = sub2ind(fshape, ix(x, l), iy(y, l));
                I(counter) = currIdx;
                K(counter) = cache(cx(x, l), cy(y, l));
                counter = counter + 1;
            end
        end
    end
end

function [I, J, K, counter] = corner_(I, J, K, counter, cachex, cachey, cache2, s, ...
    fshape, xRange, yRange, ix, iy, jx, jy)
    for xid = 1:s
        x = xRange(xid);
        for yid = 1:s
            y = yRange(yid);
            currIdx = sub2ind(fshape, x, y);
            for i = -xid+2:s
                J(counter) = sub2ind(fshape, ix(x, i), iy(y, i));
                I(counter) = currIdx;
                K(counter) = cachex(s+1+i, s+1-yid);
                counter = counter + 1;
            end
            for j = -yid+2:s
                J(counter) = sub2ind(fshape, jx(x, j), jy(y, j));
                I(counter) = currIdx;
                K(counter) = cachey(s+1-xid, s+1+j);
                counter = counter + 1;
            end
            J(counter) = sub2ind(fshape, xRange(1), yRange(1));
            I(counter) = currIdx;
            K(counter) = cache2(s+2-xid, s+2-yid);
            counter = counter + 1;
        end
    end
end